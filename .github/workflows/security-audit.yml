name: Security Audit

on:
  schedule:
    # Run security audit every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/security-audit.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/security-audit.yml'

# Default permissions
permissions:
  contents: read

jobs:
  security-audit:
    name: Security Vulnerability Audit
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install -e .

    - name: Run Safety security scan
      run: safety check --json --output safety-results.json
      continue-on-error: true

    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Run pip-audit
      run: |
        pip install --no-cache-dir pip-audit
        pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      if: github.repository_owner == 'brunel-opensim'
      continue-on-error: true
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      if: github.repository_owner == 'brunel-opensim'
      continue-on-error: true

    # Dependency Review disabled - using pip-audit for all events
    # - name: Dependency Review
    #   uses: actions/dependency-review-action@v4
    #   if: github.event_name == 'pull_request'
    #   with:
    #     fail-on-severity: moderate

    - name: Comprehensive Dependency Security Check
      # Run dependency security check for all events using pip-audit
      run: |
        echo "Running comprehensive dependency security check..."
        # Use pip-audit which was already installed above
        pip-audit --desc --format=text || echo "Some vulnerabilities found - check pip-audit-results.json for details"
        echo "Dependency security scan completed successfully"

  secret-scan:
    timeout-minutes: 10
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog for Recent Commits
      if: github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --debug --only-verified

    - name: Run TruffleHog for Full Repository Scan
      if: github.event_name != 'push' || github.event.before == '0000000000000000000000000000000000000000'
      run: |
        docker run --rm -v "$PWD:/pwd" \
          ghcr.io/trufflesecurity/trufflehog:latest \
          filesystem /pwd \
          --debug \
          --only-verified \
          --json

  compliance-check:
    name: Consortium Compliance Check
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check for sensitive files
      run: |
        # Check for common sensitive file patterns
        find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" | head -10
        
        # Check for potential credential patterns in code
        grep -r -i "password\|secret\|key\|token" --include="*.py" . | head -20 || true
        
        # Verify .gitignore contains security patterns
        if ! grep -q "\.env" .gitignore; then
          echo "Warning: .gitignore should include .env files"
        fi

    - name: License compliance check
      run: |
        # Verify Apache 2.0 license is present
        if [ ! -f "LICENSE" ]; then
          echo "Error: LICENSE file is missing"
          exit 1
        fi
        
        if ! grep -q "Apache License" LICENSE; then
          echo "Error: LICENSE file should contain Apache License"
          exit 1
        fi

    - name: Python package compliance
      run: |
        # Check that pyproject.toml exists and is valid
        if [ ! -f "pyproject.toml" ]; then
          echo "Error: pyproject.toml file is missing"
          exit 1
        fi
        
        # Install and check package can be built
        pip install --no-cache-dir build
        python -m build --wheel
        
        # Verify package metadata
        pip install --no-cache-dir twine
        twine check dist/*

    - name: Create security report
      run: |
        echo "# Security Audit Report - $(date)" > security-report.md
        echo "## Repository: homepot-client" >> security-report.md
        echo "## Date: $(date -u)" >> security-report.md
        echo "## Status: Audit completed" >> security-report.md
        echo "## Python Version: $(python --version)" >> security-report.md
        echo "" >> security-report.md
        echo "This automated security audit has been completed for consortium compliance." >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: security-report.md
        retention-days: 90
