name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-results.json || true

    - name: Run Safety security scan
      run: safety check --json --output safety-results.json || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run Black formatter check
      run: black --check src/ tests/

    - name: Run isort import sorting check
      run: isort --check-only src/ tests/

    - name: Run flake8 linting
      run: flake8 src/ tests/

    - name: Run mypy type checking
      run: mypy src/

    - name: Test documentation build
      run: |
        pip install -e ".[docs]"
        cd docs
        sphinx-build -b html -W . _build/html

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    if: github.repository == 'brunel-opensim/homepot-client'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run unit tests
      run: pytest tests/ -v --cov=homepot_client --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [security-scan, code-quality, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: homepot-client:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.repository == 'brunel-opensim/homepot-client'
    needs: [docker-build]
    environment:
      name: staging
      url: https://staging.homepot-client.example.com
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Deploy to staging environment
      run: echo "Deploy to staging - implementation depends on infrastructure"
      # Add actual deployment steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'brunel-opensim/homepot-client'
    needs: [docker-build]
    environment:
      name: production
      url: https://homepot-client.example.com
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Deploy to production environment
      run: echo "Deploy to production - implementation depends on infrastructure"
      # Add actual deployment steps here

  notify-consortium:
    name: Notify Consortium Partners
    runs-on: ubuntu-latest
    if: always() && github.repository == 'brunel-opensim/homepot-client'
    needs: [deploy-staging, deploy-production]
    steps:
    - name: Send deployment notification
      run: echo "Send notification to consortium partners - implement based on communication preferences"
      # Add notification logic here (Slack, email, etc.)
