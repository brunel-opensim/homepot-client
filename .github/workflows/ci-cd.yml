name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Default permissions for all jobs
permissions:
  contents: read

jobs:
  security-scan:
    timeout-minutes: 20
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install --no-cache-dir bandit[toml] safety

    - name: Run Bandit security scan
      run: bandit -r backend/homepot_client/ -f json -o bandit-results.json || true

    - name: Run Safety security scan
      run: safety check --json --output safety-results.json || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Check Advanced Security availability
      if: github.repository_owner != 'brunel-opensim'
      run: |
        echo "GitHub Advanced Security is not enabled for this repository."
        echo "   SARIF upload will be skipped. Security scan results are still available in job logs."
        echo "   To enable code scanning, contact your GitHub organization admin."

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository_owner == 'brunel-opensim'
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          trivy-results.sarif
        retention-days: 30

  pos-dummy:
    name: POSDummy Integration Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [security-scan]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install minimal dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r backend/requirements.txt
        pip install -e backend/

    - name: Run POSDummy Integration Test
      run: |
        set -e
        echo "Running POSDummy Integration Gate..."
        ./scripts/run-pos-dummy.sh --verbose
        echo "POSDummy gate passed - HOMEPOT infrastructure verified!"

    - name: Upload POSDummy test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pos-dummy-results
        path: |
          pytest-results.xml
          pos-dummy-report.txt
        retention-days: 7

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [pos-dummy]
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r backend/requirements.txt
        pip install -e backend/

    - name: Run Black formatter check
      run: black --check backend/homepot_client/ backend/tests/

    - name: Run isort import sorting check
      run: isort --check-only backend/homepot_client/ backend/tests/

    - name: Run flake8 linting
      run: flake8 backend/homepot_client/ backend/tests/

    - name: Run mypy type checking
      run: mypy backend/homepot_client/

    - name: Validate documentation files
      run: |
        # Check that essential documentation files exist
        test -f README.md || (echo "ERROR: README.md missing" && exit 1)
        test -f CONTRIBUTING.md || (echo "ERROR: CONTRIBUTING.md missing" && exit 1)
        test -f docs/index.md || (echo "ERROR: docs/index.md missing" && exit 1)
        test -f docs/getting-started.md || (echo "ERROR: docs/getting-started.md missing" && exit 1)
        echo "Documentation files validated"

  test:
    timeout-minutes: 15
    name: Test Suite
    runs-on: ${{ matrix.os }}
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [pos-dummy]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      shell: bash
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r backend/requirements.txt
        pip install -e backend/

    - name: Run unit tests
      shell: bash
      run: |
        cd backend
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows-specific pytest configuration for better file handling
          pytest tests/ -v --cov=homepot_client --cov-report=xml \
            --tb=short \
            --durations=10 \
            -W ignore::UserWarning:homepot_client \
            -W ignore:".*Database cleanup.*":UserWarning \
            -W ignore:".*Could not cleanup temp database.*":UserWarning
        else
          # Standard pytest configuration for Unix systems
          pytest tests/ -v --cov=homepot_client --cov-report=xml
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [security-scan, code-quality, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir build wheel

    - name: Build package
      run: |
        cd backend
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: backend/dist/
        retention-days: 30

  docker-build:
    timeout-minutes: 25
    name: Docker Build & Test
    runs-on: ubuntu-latest
    if: github.repository == 'brunel-opensim/homepot-client'
    needs: [build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: homepot-client:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker container
      run: |
        set -e
        # Start container in background
        echo "Starting Docker container..."
        container_id=$(docker run -d --name test-container -p 8000:8000 homepot-client:latest)
        echo "Container ID: $container_id"
        
        # Check if container is running
        echo "Checking container status..."
        docker ps -a
        
        # Wait a bit and check logs early
        echo "Waiting 10 seconds and checking initial logs..."
        sleep 10
        echo "Initial container logs:"
        docker logs test-container || echo "No logs yet"
        
        # Wait for container to be ready (total wait: 60s)
        echo "Waiting additional 50 seconds for full initialization..."
        sleep 50
        
        # Show container status again
        echo "Final container status:"
        docker ps -a
        
        # Show full logs before testing
        echo "Full container logs before testing:"
        docker logs test-container
        
        # Test health endpoint with retries
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Health check passed!"
            break
          else
            echo "Health check failed, attempt $i/5, waiting 10s..."
            if [ $i -eq 5 ]; then
              echo "All health check attempts failed!"
              echo "Final container logs:"
              docker logs test-container
              exit 1
            fi
            sleep 10
          fi
        done
        
        # Test root endpoint
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/ || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  notify-consortium:
    name: Notify Consortium Partners
    runs-on: ubuntu-latest
    if: always() && github.repository == 'brunel-opensim/homepot-client'
    needs: [docker-build]
    steps:
    - name: Send deployment notification
      run: echo "HOMEPOT Client CI/CD pipeline completed successfully"
      # Future: Add notification logic here (Slack, email, etc.)
